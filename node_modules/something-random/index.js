const fetch = require("node-fetch");
const { Message, MessageAttachment, MessageEmbed } = require("discord.js");
const mergeOptions = require("merge-options");
const { defaultOptions } = require("./options");

module.exports = class SomethingRandom {
  /**
   *
   * @param {import('./options').defaultOptions} options
   */
  constructor(options) {
    /**
     * @type {defaultOptions}
     */
    this.options = mergeOptions(defaultOptions, options);
  }

  /**
   *
   * @param {Message} message
   */
  async randomCat(message) {
    let body = await fetch(`http://aws.random.cat/meow`).then((res) =>
      res.json()
    );
    let url = body.file;

    let image = new MessageAttachment(url);
    if (this.options.type === "embed") {
      let embed = new MessageEmbed()
        .setColor("RANDOM")
        .setImage(image.attachment)
        .setTimestamp();
      return message.channel.send(embed);
    } else if (this.options.type === "message") {
      let photo = new MessageAttachment(url, "cat.png");
      return message.channel.send("", {
        files: [photo],
      });
    } else if (this.options.type === "url") {
      return console.log(url);
    }
  }

  /**
   *
   * @param {Message} message
   */
  async randomDog(message) {
    let body = await fetch(
      `https://dog.ceo/api/breeds/image/random`
    ).then((res) => res.json());
    let url = body.message;

    let image = new MessageAttachment(url);
    if (this.options.type === "embed") {
      let embed = new MessageEmbed()
        .setColor("RANDOM")
        .setImage(image.attachment)
        .setTimestamp();
      return message.channel.send(embed);
    } else if (this.options.type === "message") {
      let photo = new MessageAttachment(url, "dog.png");
      return message.channel.send("", {
        files: [photo],
      });
    } else if (this.options.type === "url") {
      return console.log(url);
    }
  }

  /**
   *
   * @param {Message} message
   */
  async randomAlpaca(message) {
    let body = await fetch(
      `https://apis.duncte123.me/animal/alpaca`
    ).then((res) => res.json());
    let url = body.data.file;

    let image = new MessageAttachment(url);
    if (this.options.type === "embed") {
      let embed = new MessageEmbed()
        .setColor("RANDOM")
        .setImage(image.attachment)
        .setTimestamp();
      return message.channel.send(embed);
    } else if (this.options.type === "message") {
      let photo = new MessageAttachment(url, "alpaca.png");
      return message.channel.send("", {
        files: [photo],
      });
    } else if (this.options.type === "url") {
      return console.log(url);
    }
  }

  /**
   *
   * @param {Message} message
   */
  async randomLlama(message) {
    let body = await fetch(
      `https://apis.duncte123.me/animal/llama`
    ).then((res) => res.json());
    let url = body.data.file;

    let image = new MessageAttachment(url);
    if (this.options.type === "embed") {
      let embed = new MessageEmbed()
        .setColor("RANDOM")
        .setImage(image.attachment)
        .setTimestamp();
      return message.channel.send(embed);
    } else if (this.options.type === "message") {
      let photo = new MessageAttachment(url, "llama.png");
      return message.channel.send("", {
        files: [photo],
      });
    } else if (this.options.type === "url") {
      return console.log(url);
    }
  }

  /**
   *
   * @param {Message} message
   */
  async randomMeme(message) {
    let body = await fetch(`https://apis.duncte123.me/meme`).then((res) =>
      res.json()
    );
    let url = body.data.image;

    if (this.options.type === "embed") {
      let embed = new MessageEmbed()
        .setColor("RANDOM")
        .setTitle(body.data.title)
        .setURL(body.data.url)
        .setImage(body.data.image)
        .setTimestamp();
      return message.channel.send(embed);
    } else if (this.options.type === "message") {
      let photo = new MessageAttachment(url, "meme.png");
      return message.channel.send(
        `**${body.data.title}**\nURL: <${body.data.url}>`,
        {
          files: [photo],
        }
      );
    } else if (this.options.type === "url") {
      return console.log(url);
    }
  }

  /**
   *
   * @param {Message} message
   */
  async randomJoke(message) {
    let body = await fetch(`https://apis.duncte123.me/joke`).then((res) =>
      res.json()
    );
    let url = body.data.image;

    let content;

    let bodyBody = body.data.body;
    if (bodyBody === "") content = "";
    else content = `**${bodyBody}**`;

    if (this.options.type === "embed") {
      let embed = new MessageEmbed()
        .setColor("RANDOM")
        .setDescription(
          `**${body.data.title}**\n${content}\n\nURL: <${body.data.url}>`
        )
        .setTimestamp();
      return message.channel.send(embed);
    } else if (this.options.type === "message") {
      return message.channel.send(
        `**${body.data.title}**\n${content}\n\nURL: <${body.data.url}>`
      );
    } else if (this.options.type === "url") {
      return console.log(url);
    }
  }

  /**
   *
   * @param {Message} message
   */
  async randomSeal(message) {
    let body = await fetch(
      `https://apis.duncte123.me/animal/seal`
    ).then((res) => res.json());
    let url = body.data.file;

    let image = new MessageAttachment(url);
    if (this.options.type === "embed") {
      let embed = new MessageEmbed()
        .setColor("RANDOM")
        .setImage(image.attachment)
        .setTimestamp();
      return message.channel.send(embed);
    } else if (this.options.type === "message") {
      let photo = new MessageAttachment(url, "seal.png");
      return message.channel.send("", {
        files: [photo],
      });
    } else if (this.options.type === "url") {
      return console.log(url);
    }
  }

  randomNumber(min, max) {
    if (!min)
      throw new TypeError(
        `[SomethingRandom | ERROR] Please, supply a min number`
      );
    if (!max)
      throw new TypeError(
        `[SomethingRandom | ERROR] Please, supply a max number`
      );

    return Math.ceil(Math.random() * (min * max));
  }
};
